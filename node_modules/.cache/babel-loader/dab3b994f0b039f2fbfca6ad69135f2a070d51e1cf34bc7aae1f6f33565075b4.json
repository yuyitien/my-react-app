{"ast":null,"code":"import React from\"react\";import Square from\"./Square\";// 引入 Square 組件\nimport\"./tictactoe.css\";// 引入自定義的 CSS 樣式\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Board(_ref){let{xIsNext,squares,onPlay}=_ref;// xIsNext: 下一步是 X 還是 O\n// squares: 棋盤格子的狀態陣列，包含 \"X\", \"O\" 或 null\n// onPlay: 在點擊棋盤格子時執行的函數，將更新後的 squares 傳遞給父組件\n// 點擊棋盤格子時的事件處理函數\nconst handleClick=i=>{const nextSquares=squares.slice();// 複製一份目前的 squares 陣列\n// 根據 xIsNext 的值設置下一步的棋子是 \"X\" 還是 \"O\"\nif(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}// 將更新後的 squares 陣列傳遞給父組件的 onPlay 函數\nonPlay(nextSquares);};let status=\"下一個玩家: \"+(xIsNext?\"X\":\"O\");// 顯示下一個玩家是誰的訊息\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status}),\" \",/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[0],onSquareClick:()=>handleClick(0)}),/*#__PURE__*/_jsx(Square,{value:squares[1],onSquareClick:()=>handleClick(1)}),/*#__PURE__*/_jsx(Square,{value:squares[2],onSquareClick:()=>handleClick(2)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[3],onSquareClick:()=>handleClick(3)}),/*#__PURE__*/_jsx(Square,{value:squares[4],onSquareClick:()=>handleClick(4)}),/*#__PURE__*/_jsx(Square,{value:squares[5],onSquareClick:()=>handleClick(5)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[6],onSquareClick:()=>handleClick(6)}),/*#__PURE__*/_jsx(Square,{value:squares[7],onSquareClick:()=>handleClick(7)}),/*#__PURE__*/_jsx(Square,{value:squares[8],onSquareClick:()=>handleClick(8)})]})]});}export default Board;","map":{"version":3,"names":["React","Square","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Board","_ref","xIsNext","squares","onPlay","handleClick","i","nextSquares","slice","status","children","className","value","onSquareClick"],"sources":["C:/Users/owner/Desktop/my-react-app/src/components/tic-tac-toe/Board.js"],"sourcesContent":["import React from \"react\";\r\nimport Square from \"./Square\"; // 引入 Square 組件\r\nimport \"./tictactoe.css\"; // 引入自定義的 CSS 樣式\r\n\r\nfunction Board({ xIsNext, squares, onPlay }) {\r\n  // xIsNext: 下一步是 X 還是 O\r\n  // squares: 棋盤格子的狀態陣列，包含 \"X\", \"O\" 或 null\r\n  // onPlay: 在點擊棋盤格子時執行的函數，將更新後的 squares 傳遞給父組件\r\n\r\n  // 點擊棋盤格子時的事件處理函數\r\n  const handleClick = (i) => {\r\n    const nextSquares = squares.slice(); // 複製一份目前的 squares 陣列\r\n\r\n    // 根據 xIsNext 的值設置下一步的棋子是 \"X\" 還是 \"O\"\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    // 將更新後的 squares 陣列傳遞給父組件的 onPlay 函數\r\n    onPlay(nextSquares);\r\n  };\r\n\r\n  let status = \"下一個玩家: \" + (xIsNext ? \"X\" : \"O\"); // 顯示下一個玩家是誰的訊息\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div> {/* 顯示遊戲狀態的訊息 */}\r\n      <div>\r\n        {/* 第一列的三個 Square 組件，分別傳遞不同的 props */}\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div>\r\n        {/* 第二列的三個 Square 組件，分別傳遞不同的 props */}\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div>\r\n        {/* 第三列的三個 Square 組件，分別傳遞不同的 props */}\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Board;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,UAAU,CAAE;AAC/B,MAAO,iBAAiB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE1B,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAA+B,IAA9B,CAAEC,OAAO,CAAEC,OAAO,CAAEC,MAAO,CAAC,CAAAH,IAAA,CACzC;AACA;AACA;AAEA;AACA,KAAM,CAAAI,WAAW,CAAIC,CAAC,EAAK,CACzB,KAAM,CAAAC,WAAW,CAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAAE;AAErC;AACA,GAAIN,OAAO,CAAE,CACXK,WAAW,CAACD,CAAC,CAAC,CAAG,GAAG,CACtB,CAAC,IAAM,CACLC,WAAW,CAACD,CAAC,CAAC,CAAG,GAAG,CACtB,CACA;AACAF,MAAM,CAACG,WAAW,CAAC,CACrB,CAAC,CAED,GAAI,CAAAE,MAAM,CAAG,SAAS,EAAIP,OAAO,CAAG,GAAG,CAAG,GAAG,CAAC,CAAE;AAChD,mBACEL,KAAA,CAAAE,SAAA,EAAAW,QAAA,eACEf,IAAA,QAAKgB,SAAS,CAAC,QAAQ,CAAAD,QAAA,CAAED,MAAM,CAAM,CAAC,IAAC,cACvCZ,KAAA,QAAAa,QAAA,eAEEf,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,EAC/D,CAAC,cACNR,KAAA,QAAAa,QAAA,eAEEf,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,EAC/D,CAAC,cACNR,KAAA,QAAAa,QAAA,eAEEf,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,cAClEV,IAAA,CAACF,MAAM,EAACmB,KAAK,CAAET,OAAO,CAAC,CAAC,CAAE,CAACU,aAAa,CAAEA,CAAA,GAAMR,WAAW,CAAC,CAAC,CAAE,CAAE,CAAC,EAC/D,CAAC,EACN,CAAC,CAEP,CACA,cAAe,CAAAL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}