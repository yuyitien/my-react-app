{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Desktop\\\\my-react-app\\\\src\\\\components\\\\MySlider.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\"; // 引入 useState 鉤子\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MySlider({\n  onChange\n}) {\n  _s();\n  // 使用 useState 定義 value 狀態，初始值為 128\n  const [value, setValue] = useState(128);\n  // 處理滑動條值改變的函數\n  const handleChange = e => {\n    setValue(e.target.value); // 更新 value 狀態為滑動條的新值\n    if (onChange) {\n      onChange(e.target.value); // 如果有傳入 onChange 回調函數，則調用它並傳遞新的值\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\" // 設置 input 類型為範圍滑動條\n      ,\n      width: \"200\" // 設置寬度（這個屬性在 input 標籤中不起作用）\n      ,\n      min: \"0\" // 設置最小值\n      ,\n      max: \"255\" // 設置最大值\n      ,\n      value: value // 綁定滑動條的值為狀態 value\n      ,\n      onChange: handleChange // 當滑動條值改變時調用 handleChange 函數\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_s(MySlider, \"eJE+6sted5OoGqIqtCc/KJqXdWs=\");\n_c = MySlider;\nexport default MySlider; // 導出 MySlider 組件\nvar _c;\n$RefreshReg$(_c, \"MySlider\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","MySlider","onChange","_s","value","setValue","handleChange","e","target","children","type","width","min","max","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/owner/Desktop/my-react-app/src/components/MySlider.js"],"sourcesContent":["import { useState } from \"react\"; // 引入 useState 鉤子\r\n\r\nfunction MySlider({onChange}) {\r\n   // 使用 useState 定義 value 狀態，初始值為 128\r\n  const [value, setValue] = useState(128);\r\n  // 處理滑動條值改變的函數\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value); // 更新 value 狀態為滑動條的新值\r\n    if (onChange){\r\n      onChange(e.target.value); // 如果有傳入 onChange 回調函數，則調用它並傳遞新的值\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"range\" // 設置 input 類型為範圍滑動條\r\n        width = \"200\" // 設置寬度（這個屬性在 input 標籤中不起作用）\r\n        min=\"0\" // 設置最小值\r\n        max=\"255\" // 設置最大值\r\n        value={value} // 綁定滑動條的值為狀態 value\r\n        onChange={handleChange} // 當滑動條值改變時調用 handleChange 函數\r\n      />\r\n      <span>{value}</span> {/* 顯示當前滑動條的值 */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MySlider; // 導出 MySlider 組件\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,QAAQA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC3B;EACD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;EACvC;EACA,MAAMQ,YAAY,GAAIC,CAAC,IAAK;IAC1BF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC;IAC1B,IAAIF,QAAQ,EAAC;MACXA,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;EACD,oBACEJ,OAAA;IAAAS,QAAA,gBACET,OAAA;MACEU,IAAI,EAAC,OAAO,CAAC;MAAA;MACbC,KAAK,EAAG,KAAK,CAAC;MAAA;MACdC,GAAG,EAAC,GAAG,CAAC;MAAA;MACRC,GAAG,EAAC,KAAK,CAAC;MAAA;MACVT,KAAK,EAAEA,KAAM,CAAC;MAAA;MACdF,QAAQ,EAAEI,YAAa,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACFjB,OAAA;MAAAS,QAAA,EAAOL;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV;AAACd,EAAA,CAvBQF,QAAQ;AAAAiB,EAAA,GAARjB,QAAQ;AAyBjB,eAAeA,QAAQ,CAAC,CAAC;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}