{"ast":null,"code":"import React,{useState}from\"react\";import Board from\"./Board\";// 導入遊戲板組件\nimport\"./tictactoe.css\";// 導入樣式表\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function TicTacToe(){const[history,setHistory]=useState([Array(9).fill(null)]);// 使用狀態管理遊戲歷史記錄，初始為一個長度為9的空陣列\nconst[currentMove,setCurrentMove]=useState(0);// 使用狀態管理當前移動步數，初始為0\nconst currentSquares=history[currentMove];// 當前遊戲盤面即為歷史記錄中的第currentMove步\nconst xIsNext=currentMove%2===0;// 判斷下一步是輪到 X 還是 O 下棋\n// 處理玩家下棋的函式，接收下一步的棋盤狀態並更新歷史記錄和當前移動步數\nconst handlePlay=nextSquares=>{const nextHistory=[...history.slice(0,currentMove+1),nextSquares];// 複製歷史記錄並加入新的棋盤狀態\nsetHistory(nextHistory);// 更新歷史記錄\nsetCurrentMove(nextHistory.length-1);// 更新當前移動步數\n};// 處理跳轉到特定步數的函式，接收要跳轉的步數並設置為當前移動步數\nconst jumpTo=nextMove=>setCurrentMove(nextMove);// 生成遊戲歷程的按鈕列表，每一步都有一個跳轉按鈕\nconst moves=history.map((squares,move)=>{let description;if(move>0){description=\"回到第 \"+move+\" 步\";// 若步數大於0，顯示\"回到第 move 步\"\n}else{description=\"遊戲開始\";// 步數為0時，顯示\"遊戲開始\"\n}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>jumpTo(move),children:description})},move)});});return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-board\",children:[/*#__PURE__*/_jsx(Board,{xIsNext:xIsNext,squares:currentSquares,onPlay:handlePlay}),\" \"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-info\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u904A\\u6232\\u6B77\\u7A0B\"}),/*#__PURE__*/_jsx(\"ol\",{children:moves}),\" \"]})]});}export default TicTacToe;","map":{"version":3,"names":["React","useState","Board","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","TicTacToe","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","xIsNext","handlePlay","nextSquares","nextHistory","slice","length","jumpTo","nextMove","moves","map","squares","move","description","children","onClick","className","onPlay"],"sources":["C:/Users/owner/Desktop/my-react-app/src/components/tic-tac-toe/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Board from \"./Board\"; // 導入遊戲板組件\r\nimport \"./tictactoe.css\"; // 導入樣式表\r\n\r\nfunction TicTacToe() {\r\n  const [history, setHistory] = useState([Array(9).fill(null)]); // 使用狀態管理遊戲歷史記錄，初始為一個長度為9的空陣列\r\n  const [currentMove, setCurrentMove] = useState(0); // 使用狀態管理當前移動步數，初始為0\r\n  const currentSquares = history[currentMove]; // 當前遊戲盤面即為歷史記錄中的第currentMove步\r\n  const xIsNext = currentMove % 2 === 0; // 判斷下一步是輪到 X 還是 O 下棋\r\n\r\n  // 處理玩家下棋的函式，接收下一步的棋盤狀態並更新歷史記錄和當前移動步數\r\n  const handlePlay = (nextSquares) => {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares]; // 複製歷史記錄並加入新的棋盤狀態\r\n    setHistory(nextHistory); // 更新歷史記錄\r\n    setCurrentMove(nextHistory.length - 1); // 更新當前移動步數\r\n  };\r\n\r\n  // 處理跳轉到特定步數的函式，接收要跳轉的步數並設置為當前移動步數\r\n  const jumpTo = (nextMove) => setCurrentMove(nextMove);\r\n\r\n  // 生成遊戲歷程的按鈕列表，每一步都有一個跳轉按鈕\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    if (move > 0) {\r\n      description = \"回到第 \" + move + \" 步\"; // 若步數大於0，顯示\"回到第 move 步\"\r\n    } else {\r\n      description = \"遊戲開始\"; // 步數為0時，顯示\"遊戲開始\"\r\n    }\r\n    return (\r\n      <>\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{description}</button>{/* 按鈕點擊時跳轉到對應步數 */}\r\n        </li>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} /> {/* 渲染遊戲板組件 */}\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <h4>遊戲歷程</h4>\r\n        <ol>{moves}</ol> {/* 顯示遊戲歷程的按鈕列表 */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TicTacToe;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,KAAK,KAAM,SAAS,CAAE;AAC7B,MAAO,iBAAiB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,SAASA,CAAA,CAAG,CACnB,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE;AAC/D,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAAE;AACnD,KAAM,CAAAe,cAAc,CAAGN,OAAO,CAACI,WAAW,CAAC,CAAE;AAC7C,KAAM,CAAAG,OAAO,CAAGH,WAAW,CAAG,CAAC,GAAK,CAAC,CAAE;AAEvC;AACA,KAAM,CAAAI,UAAU,CAAIC,WAAW,EAAK,CAClC,KAAM,CAAAC,WAAW,CAAG,CAAC,GAAGV,OAAO,CAACW,KAAK,CAAC,CAAC,CAAEP,WAAW,CAAG,CAAC,CAAC,CAAEK,WAAW,CAAC,CAAE;AACzER,UAAU,CAACS,WAAW,CAAC,CAAE;AACzBL,cAAc,CAACK,WAAW,CAACE,MAAM,CAAG,CAAC,CAAC,CAAE;AAC1C,CAAC,CAED;AACA,KAAM,CAAAC,MAAM,CAAIC,QAAQ,EAAKT,cAAc,CAACS,QAAQ,CAAC,CAErD;AACA,KAAM,CAAAC,KAAK,CAAGf,OAAO,CAACgB,GAAG,CAAC,CAACC,OAAO,CAAEC,IAAI,GAAK,CAC3C,GAAI,CAAAC,WAAW,CACf,GAAID,IAAI,CAAG,CAAC,CAAE,CACZC,WAAW,CAAG,MAAM,CAAGD,IAAI,CAAG,IAAI,CAAE;AACtC,CAAC,IAAM,CACLC,WAAW,CAAG,MAAM,CAAE;AACxB,CACA,mBACEzB,IAAA,CAAAE,SAAA,EAAAwB,QAAA,cACE1B,IAAA,OAAA0B,QAAA,cACE1B,IAAA,WAAQ2B,OAAO,CAAEA,CAAA,GAAMR,MAAM,CAACK,IAAI,CAAE,CAAAE,QAAA,CAAED,WAAW,CAAS,CAAC,EADpDD,IAEL,CAAC,CACL,CAAC,CAEP,CAAC,CAAC,CAEF,mBACEpB,KAAA,QAAKwB,SAAS,CAAC,MAAM,CAAAF,QAAA,eACnBtB,KAAA,QAAKwB,SAAS,CAAC,YAAY,CAAAF,QAAA,eACzB1B,IAAA,CAACF,KAAK,EAACe,OAAO,CAAEA,OAAQ,CAACU,OAAO,CAAEX,cAAe,CAACiB,MAAM,CAAEf,UAAW,CAAE,CAAC,IAAC,EACtE,CAAC,cACNV,KAAA,QAAKwB,SAAS,CAAC,WAAW,CAAAF,QAAA,eACxB1B,IAAA,OAAA0B,QAAA,CAAI,0BAAI,CAAI,CAAC,cACb1B,IAAA,OAAA0B,QAAA,CAAKL,KAAK,CAAK,CAAC,IAAC,EACd,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAhB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}