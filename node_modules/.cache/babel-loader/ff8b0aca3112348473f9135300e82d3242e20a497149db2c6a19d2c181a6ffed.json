{"ast":null,"code":"import React from\"react\";import Square from\"./Square\";// 匯入方塊（Square）組件\nimport\"./tictactoe.css\";// 匯入遊戲的 CSS 樣式表\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Board(_ref){let{xIsNext,squares,onPlay}=_ref;// 定義點擊事件的處理函式，i 為方塊的索引\nconst handleClick=i=>{// 如果已經有勝者或方塊已經被填入，則不處理點擊事件\nif(calculateWinner(squares)||squares[i]){return;}// 複製目前的方塊陣列\nconst nextSquares=squares.slice();// 根據 xIsNext 判斷下一步該填入 \"X\" 還是 \"O\"\nif(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}// 呼叫外部傳入的 onPlay 函式，並傳遞更新後的方塊陣列\nonPlay(nextSquares);};// 函式：計算贏家\nconst calculateWinner=squares=>{// 定義可能形成連線的所有直線組合\nconst lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];// 迭代所有直線組合，檢查是否有一條直線上都是相同的符號（\"X\" 或 \"O\"）\nfor(let i=0;i<=lines.length-1;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c])return squares[a];// 如果有符合條件的直線，返回該符號（\"X\" 或 \"O\"）\n}return null;// 如果沒有符合條件的直線，返回 null，表示還沒有贏家\n};// 呼叫 calculateWinner 函式，得到當前的贏家\nconst winner=calculateWinner(squares);// 根據是否有贏家來設置狀態文字\nlet status=winner?\"\\u8D0F\\u5BB6: \".concat(winner):\"\\u4E0B\\u4E00\\u500B\\u73A9\\u5BB6: \".concat(xIsNext?\"X\":\"O\");// let status;\n// if (winner) {\n//   status = \"贏家 \" + winner;\n// } else {\n//   status = \"下一個玩家: \" + (xIsNext ? \"X\" : \"O\");\n// }\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status}),\" \",/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[0],onSquareClick:()=>handleClick(0)}),/*#__PURE__*/_jsx(Square,{value:squares[1],onSquareClick:()=>handleClick(1)}),/*#__PURE__*/_jsx(Square,{value:squares[2],onSquareClick:()=>handleClick(2)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[3],onSquareClick:()=>handleClick(3)}),/*#__PURE__*/_jsx(Square,{value:squares[4],onSquareClick:()=>handleClick(4)}),/*#__PURE__*/_jsx(Square,{value:squares[5],onSquareClick:()=>handleClick(5)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Square,{value:squares[6],onSquareClick:()=>handleClick(6)}),/*#__PURE__*/_jsx(Square,{value:squares[7],onSquareClick:()=>handleClick(7)}),/*#__PURE__*/_jsx(Square,{value:squares[8],onSquareClick:()=>handleClick(8)})]})]});}export default Board;// 匯出 Board 組件","map":{"version":3,"names":["React","Square","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Board","_ref","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","lines","length","a","b","c","winner","status","concat","children","className","value","onSquareClick"],"sources":["C:/Users/owner/Desktop/my-react-app/src/components/tic-tac-toe/Board.js"],"sourcesContent":["import React from \"react\";\r\nimport Square from \"./Square\"; // 匯入方塊（Square）組件\r\nimport \"./tictactoe.css\"; // 匯入遊戲的 CSS 樣式表\r\n\r\nfunction Board({ xIsNext, squares, onPlay }) {\r\n  // 定義點擊事件的處理函式，i 為方塊的索引\r\n  const handleClick = (i) => {\r\n    // 如果已經有勝者或方塊已經被填入，則不處理點擊事件\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    // 複製目前的方塊陣列\r\n    const nextSquares = squares.slice();\r\n    // 根據 xIsNext 判斷下一步該填入 \"X\" 還是 \"O\"\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    // 呼叫外部傳入的 onPlay 函式，並傳遞更新後的方塊陣列\r\n    onPlay(nextSquares);\r\n  };\r\n\r\n   // 函式：計算贏家\r\n  const calculateWinner = (squares) => {\r\n    // 定義可能形成連線的所有直線組合\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    // 迭代所有直線組合，檢查是否有一條直線上都是相同的符號（\"X\" 或 \"O\"）\r\n    for (let i = 0; i <= lines.length - 1; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n        return squares[a]; // 如果有符合條件的直線，返回該符號（\"X\" 或 \"O\"）\r\n    }\r\n    return null; // 如果沒有符合條件的直線，返回 null，表示還沒有贏家\r\n  };\r\n\r\n  // 呼叫 calculateWinner 函式，得到當前的贏家\r\n  const winner = calculateWinner(squares);\r\n  // 根據是否有贏家來設置狀態文字\r\n  let status = winner\r\n    ? `贏家: ${winner}`\r\n    : `下一個玩家: ${xIsNext ? \"X\" : \"O\"}`;\r\n  // let status;\r\n  // if (winner) {\r\n  //   status = \"贏家 \" + winner;\r\n  // } else {\r\n  //   status = \"下一個玩家: \" + (xIsNext ? \"X\" : \"O\");\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div> {/* 顯示狀態文字 */}\r\n      <div>\r\n        {/* 將方塊（Square）組件放置在遊戲板上，並綁定點擊事件 */}\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div>\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div>\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Board; // 匯出 Board 組件\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}